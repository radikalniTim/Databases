//MySQLDIM -> My SQL Database Information Management

package test;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

public class MySQLDIM{
	
	String databaseURL = null;
	String databaseUserName = null;
	String databasePassword = null;
	String databaseName = null;

/*---------------------------------------------------------------------------------------------------
* 										CONSTRUCTOR
*---------------------------------------------------------------------------------------------------
*/	
	public MySQLDIM (String url, String databaseName, String userName, String password){
		this.databaseURL = url;
		this.databaseUserName = userName;
		this.databasePassword = password;
		this.databaseName = databaseName;
	}
/*---------------------------------------------------------------------------------------------------
 * 						METHOD FOR INSERTING NEW DATA IN TO THE TABLE
 *---------------------------------------------------------------------------------------------------
 */
	public void insertData (String databaseTableName, String referenceColumnName, String referenceColumnValue, String...columnNameOrValue){ 
		
		/*referenceColumnName - name of colum that is used as a reference for input of other column values 
		 * entered in eve vararg columnNameOrValue								
		 * 			
		 * You must respect next sequence while calling this method: 
		 * ("table name", 
		 * "reference column NAME", "reference column VALUE", 
		 * "2. column name", "2. column value", 
		 * "3. column name", "3. column value"
		 * .
		 * .
		 * ....);
		 * EXAMPLE: object.setData ("myDatabaseTableName", "userName", "jondo", 
		 * 							"firstName", "John", "lastName", "Doe"........);
		*/
		try{ 
			Connection myConn = DriverManager.getConnection(databaseURL, databaseUserName, databasePassword);
			Statement myStmt = myConn.createStatement();
			myStmt.executeQuery("SELECT * FROM " + databaseTableName + ";");
			
			//Transferring content of vararg columnNameorValue in to the array for easyer data manipulation			 		
			String[] columnNorV = columnNameOrValue;			
			
			//Reset of autogenerated cell value to 1 (it will continue to count from last value that is in table in specified column)
			myStmt.executeUpdate ("ALTER TABLE " + databaseTableName + " AUTO_INCREMENT = 1");
			
			//Inserting new row of data	based on reference column name
			myStmt.executeUpdate("INSERT INTO `"+ databaseName + "`.`" 
								+ databaseTableName + "`(`"+referenceColumnName+"`) VALUES ('"+referenceColumnValue+"')");		
		
			  
			 /* If we only say to itterate through array columnNorV and INSERT (insead of UPDATE) data, 
			  * every value we wish to insert, will be inserted in new row in table, as a new entry.*/			  					
			int i=0;
			while (i<columnNorV.length){				 
				myStmt.executeUpdate("UPDATE `" 
									+ databaseName + 
									"`.`"  
									+ databaseTableName + 
									"` SET `" 
									+ columnNorV[i] + 
									"`='" 
									+ columnNorV[i+1] + 
									"' WHERE `"
									+ referenceColumnName + 
									"`='"
									+ referenceColumnValue +
									"'");
				
				/*because all even (and zero) array indexed fields hold names of columns,
			 	 *and all odd array indexed fields hold values of those columns, we must
			 	 *incremen counter i by 2 every time*/			 	 
				i+=2;  
			}
			
			System.out.println("Insert of new data in " + databaseName + "." + databaseTableName + " is completed!");
		}
		catch (SQLException e){			
			e.printStackTrace();
		}
	}	
/*---------------------------------------------------------------------------------------------------
* 						METHOD FOR FETCHING DATA FROM TO THE TABLE
*----------------------------------------------------------------------------------------------------
*/	
	public ArrayList<String> getData (String databaseTableName, String searchInColumnName, String searchValue, String...fetchDataFromColumnName){
		
		
		/* This method is returning all of the data that is equal to the specified value (searchValue) 
		 * from specified columns (searchInColumnName)*/
		 
		
		//columnNameArray is used for easyer data manipulation
		String[] columnNameArray = fetchDataFromColumnName;
		
		//array list used for storing data from search query
		ArrayList<String> fetchedData = new ArrayList<String>();
		
		try {			
			Connection myConn = DriverManager.getConnection(databaseURL, databaseUserName, databasePassword);			
			Statement myStmt = myConn.createStatement();	
			ResultSet myRS = myStmt.executeQuery("SELECT * FROM " 
												+ databaseTableName + 
												" WHERE BINARY " 
												+ searchInColumnName + 
												" = '" 
												+ searchValue + 
												"' LIMIT 0,18446744073709551615;");	//bigInt value->all values that correspond to search querry
			
			
			/* whille loop shifts pointer on every selected row, and for loop adds data from each selected 
			 * cell in that row to array list fetchedData*/			 
			while (myRS.next()){
				for (int i=0; i<columnNameArray.length; i++){
					fetchedData.add(myRS.getString(columnNameArray[i]));
				}
			}
		
		System.out.println("Java had succsessfully retreived data from database: " + databaseName + "." + databaseTableName);
		}
		catch (SQLException e){
			e.printStackTrace();
		}
		
		return fetchedData; //when calling this method, you must return data in array list with generic type <String>
	}	
/*---------------------------------------------------------------------------------------------------
* 						METHOD FOR UPDATE OF EXISTING DATA IN TABLE
*----------------------------------------------------------------------------------------------------
*/	
	public void updateData (String databaseTableName, String referenceColumnName, String referenceColumnValue, String...columnNameOrValue){
		
		
		/* referenceColumnName and referenceColumnValue are used to find a record that we wish to change
		 * columnNameOrValue is used to store next information:
		 * 	- column name
		 *  - column value
		 * 
		 * This method is similar to insertData method (almost the same) -> without part of inserting new data*/
		
		String[] columnNorV = columnNameOrValue;
	
		try {			
			Connection myConn = DriverManager.getConnection(databaseURL, databaseUserName, databasePassword);			
			Statement myStmt = myConn.createStatement();	
			myStmt.executeQuery("SELECT * FROM " + databaseTableName + ";");
			
			int i = 0;
			int j = 0;
			while (i<columnNorV.length){				
				j = myStmt.executeUpdate("UPDATE `" 
										+ databaseName + 
										"`.`"  
										+ databaseTableName + 
										"` SET `" 
										+ columnNorV[i] + 
										"`='" 
										+ columnNorV[i+1] + 
										"' WHERE BINARY `"
										+ referenceColumnName + 
										"`='"
										+ referenceColumnValue +
										"'");
				i+=2;			
			}
			
			//checking if updating went OK
			if (j>0) System.out.println("Java had succsessfully updated data in database: " + databaseName + "." + databaseTableName);			
			else System.out.println("ERROR while updating data in: " + databaseName + "." + databaseTableName);
		}
		catch (SQLException e){
			e.printStackTrace();
		}		
	}	
/*---------------------------------------------------------------------------------------------------
* 						METHOD FOR DELETING DATA IN TABLE
*----------------------------------------------------------------------------------------------------
*/	
	public void deleteRow (String databaseTableName, String referenceColumnName, String referenceColumnValue){
		
		
		/* IMPORTANT!!!
		 * IF, SOMEHOW, VALUE OF VARIABLE referenceColumnValue STAYS EMPTY, ALL DATA FROM TABLE IS GOING TO BE DELETED!!!!!*/
		 
		try {			
			Connection myConn = DriverManager.getConnection(databaseURL, databaseUserName, databasePassword);			
			Statement myStmt = myConn.createStatement();								
			int j=myStmt.executeUpdate("DELETE FROM `" 
								+ databaseName + 
								"`.`"  
								+ databaseTableName + 
								"` WHERE BINARY`" 
								+ referenceColumnName + 
								"`='" 
								+ referenceColumnValue + 
								"'");
			
			//checking if updating went OK
			if (j>0) System.out.println("Java had succsessfully updated data in database: " + databaseName + "." + databaseTableName);			
			else System.out.println("ERROR while DELETING data in: " + databaseName + "." + databaseTableName);
		}
		catch (SQLException e){
			e.printStackTrace();
		}		
	}	
}


